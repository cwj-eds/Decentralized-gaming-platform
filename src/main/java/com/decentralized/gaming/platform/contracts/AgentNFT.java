package com.decentralized.gaming.platform.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.10.3.
 */
@SuppressWarnings("rawtypes")
public class AgentNFT extends Contract {
    public static final String BINARY = "0x6080346200035d576001600160401b03906040818101838111838210176200034757815260098252602091681059d95b9d0813919560ba1b83820152815193828501858110828211176200034757835260058552641051d1539560da1b84860152815181811162000347576000948554916001948584811c941680156200033c575b8385101462000328578190601f94858111620002d5575b5083908583116001146200027157899262000265575b5050600019600383901b1c191690851b1786555b8651928311620002515783548481811c9116801562000246575b828210146200023257828111620001ea575b50809183116001146200018357508495829394959262000177575b5050600019600383901b1c191690821b1790555b60075490519133906001600160a01b038316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36001600160a81b0319163360ff60a01b1916176007556135899081620003638239f35b01519050388062000109565b90601f198316968487528287209287905b898210620001d2575050838596979810620001b8575b505050811b0190556200011d565b015160001960f88460031b161c19169055388080620001aa565b80878596829496860151815501950193019062000194565b8487528187208380860160051c82019284871062000228575b0160051c019085905b8281106200021c575050620000ee565b8881550185906200020c565b9250819262000203565b634e487b7160e01b87526022600452602487fd5b90607f1690620000dc565b634e487b7160e01b86526041600452602486fd5b015190503880620000ae565b898052848a208894509190601f1984168b5b87828210620002be5750508411620002a4575b505050811b018655620000c2565b015160001960f88460031b161c1916905538808062000296565b8385015186558b9790950194938401930162000283565b9091508880528389208580850160051c8201928686106200031e575b918991869594930160051c01915b8281106200030f57505062000098565b8b8155859450899101620002ff565b92508192620002f1565b634e487b7160e01b88526022600452602488fd5b93607f169362000081565b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146128d25750806304853d7a1461284a57806306fdde03146127a7578063081812fc14612789578063095ea7b31461260f5780631b07fe47146106475780631d24616f1461231457806323b872dd146122eb57806327c723d6146121975780632de5aaf71461203157806336dd8a1a14611fa15780633dd3d55414611ce65780633f4ba83a14611c4a57806342842e0e14611c225780634728fe9414611bf0578063513856c814611ae15780635c975abb14611abb5780636352211e14611a8b57806370a08231146119f4578063715018a6146119975780637340b1541461194d5780637ca4f7a2146117ad57806383efdc991461173d5780638456cb59146116db5780638da5cb5b146116b257806391b34f0d1461088557806395d89b41146107a6578063a22cb465146106ce578063aa2fe91b1461068f578063b200c77d14610647578063b88d4fde146105e8578063c0cf28a9146105ca578063c87b56dd14610558578063cc62097a146104bd578063d0f7d57c14610468578063e246578c146103e0578063e985e9c51461038a578063ed58bad814610335578063f2fde38b146102715763fd0928a2146101d757600080fd5b3461026c5760407f9a9128feebe462e06096133ee6a84a7fa736bb94052ac0338364084716bd2cc561020836612d72565b610226610216839593612e3b565b6001600160a01b031633146134b7565b600084815260026020526040902054610249906001600160a01b03161515613432565b8360005260096020526006826000200190808254925582519182526020820152a2005b600080fd5b3461026c57602036600319011261026c5761028a612aa2565b610292612d97565b6001600160a01b039081169081156102e157600754826001600160601b0360a01b821617600755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461026c57604036600319011261026c57610388610351612aa2565b610359612d88565b90610362612d97565b60018060a01b0316600052600d60205260406000209060ff801983541691151516179055565b005b3461026c57604036600319011261026c576103a3612aa2565b6103ab612ab8565b9060018060a01b03809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b3461026c5760208060031936011261026c576001600160a01b03610402612aa2565b16600052600a8152604060002090604051908181845491828152019360005281600020916000905b8282106104515761044d856104418189038261298e565b60405191829182612a1f565b0390f35b83548652948501946001938401939091019061042a565b3461026c57602061049061047b36612c33565b92908160405193828580945193849201612a5a565b8101600b815203019020805482101561026c576020916104af91612c64565b90546040519160031b1c8152f35b3461026c5760208060031936011261026c576004356001600160401b03811161026c57816104f2610505923690600401612a01565b8160405193828580945193849201612a5a565b8101600c81520301902090604051908181845491828152019360005281600020916000905b8282106105415761044d856104418189038261298e565b83548652948501946001938401939091019061052a565b3461026c57602036600319011261026c5760043560008181526002602052604090205461058f906001600160a01b03161515612def565b600052600660205261044d6105a76040600020612ccc565b60006040516105b581612973565b52604051918291602083526020830190612a7d565b3461026c57600036600319011261026c576020600854604051908152f35b3461026c57608036600319011261026c57610601612aa2565b610609612ab8565b606435916001600160401b03831161026c573660238401121561026c5761063d6103889336906024816004013591016129ca565b9160443591612efe565b3461026c57604036600319011261026c57610660612ab8565b600435600052600e60205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461026c57602036600319011261026c576001600160a01b036106b0612aa2565b16600052600d602052602060ff604060002054166040519015158152f35b3461026c57604036600319011261026c576106e7612aa2565b6106ef612d88565b6001600160a01b0390911690338214610761573360005260056020526040600020826000526020526107318160406000209060ff801983541691151516179055565b60405190151581527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b3461026c57600036600319011261026c57604051600060018054906107ca82612c92565b8085529181811690811561085e5750600114610805575b61044d846107f18186038261298e565b604051918291602083526020830190612a7d565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106108465750505081016020016107f1826107e1565b8054602085870181019190915290930192810161082e565b60ff191660208087019190915292151560051b850190920192506107f191508390506107e1565b3461026c5761012036600319011261026c5761089f612aa2565b6024356001600160401b03811161026c576108be903690600401612a01565b6044356001600160401b03811161026c576108dd903690600401612a01565b6064356001600160401b03811161026c576108fc903690600401612a01565b926084356001600160401b03811161026c5761091c903690600401612a01565b9260a4356001600160401b03811161026c5761093c903690600401612a01565b926001600160401b0360e4351161026c5736602360e43501121561026c5760e435600401359361096b85612c1c565b94610979604051968761298e565b80865260208601903660248260051b60e43501011161026c57602460e43501915b60248260051b60e4350101831061167f575050506001600160401b03610104351161026c576109cf3661010435600401612a01565b9533600052600d60205260ff60406000205416801561166b575b6109f29061329f565b6109fa61339f565b6001600160a01b03851615611626578351156115ea578751156115a557610a23815115156132e4565b6001600854019687600855610a56610a5089600052600260205260018060a01b0360406000205416151590565b156133e6565b610a5e61339f565b600088815260026020526040902054610a81906001600160a01b03161515610a50565b6001600160a01b0386166000818152600360209081526040808320805460010190558b83526002909152812080546001600160a01b031916831790558991907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a46000888152600260205260409020546001600160a01b031615611549578760005260066020526040600020908051906001600160401b03821161109f578190610b2d8454612c92565b601f8111611517575b50602090601f83116001146114ab576000926114a0575b50508160011b916000199060031b1c19161790555b7ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce76020604051898152a160405192610b9984612957565b84845260208401528760408401526060830152608082015260018060a01b03831660a082015260c43560c08201524260e08201526000610100820152600061012082015260016101408201528361016082015284600052600960205260406000209080518051906001600160401b03821161109f578190610c1a8554612c92565b601f811161146e575b50602090601f8311600114611402576000926113f7575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b03821161109f578190610c746001860154612c92565b601f81116113c2575b50602090601f831160011461135057600092611345575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b03821161109f578190610cd16002860154612c92565b601f8111611310575b50602090601f831160011461129e57600092611293575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b03821161109f578190610d2e6003860154612c92565b601f811161125e575b50602090601f83116001146111ec576000926111e1575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b03821161109f57610d896004850154612c92565b601f81116111ac575b50602090601f8311600114611138576101609392916000918361112d575b50508160011b916000199060031b1c19161760048401555b6005830160018060a01b0360a0830151166001600160601b0360a01b82541617905560c0810151600684015560e0810151600784015561010081015160088401556101208101516009840155610e346101408201511515600a85019060ff801983541691151516179055565b0151805190600160401b821161109f57600b83015482600b8501558083106110b5575b506020600b910192016000526020600020916000905b828210610f7f575050505060018060a01b038216600052600a602052610e97846040600020613347565b610ec18460405160208181610eb28b83815193849201612a5a565b8101600b815203019020613347565b60005b8351811015610f115780610f0786610ef86020610ee4610f0c968a61338b565b518160405193828580945193849201612a5a565b8101600c815203019020613347565b61337c565b610ec4565b60208584817f48a293f83a78831d07482ef40c8ba639b10c20dd77a617e65c79b0659b33020e610f5387610f608d604051938493606085526060850190612a7d565b908382038a850152612a7d565b60c43560408301526001600160a01b03909516940390a3604051908152f35b80518051906001600160401b03821161109f57610f9c8654612c92565b601f8111611062575b50602090601f8311600114610ff2579282600194936020938695600092610fe7575b5050600019600383901b1c191690841b1787555b01940191019092610e6d565b015190508e80610fc7565b908660005260206000209160005b601f198516811061104a575083602093600196938796938794601f19811610611031575b505050811b018755610fdb565b015160001960f88460031b161c191690558e8080611024565b91926020600181928685015181550194019201611000565b61108f90876000526020600020601f850160051c81019160208610611095575b601f0160051c0190613330565b8b610fa5565b9091508190611082565b634e487b7160e01b600052604160045260246000fd5b600b84016000526020600020908382015b81830181106110d6575050610e57565b806110e360019254612c92565b806110f0575b50016110c6565b601f811183146111065750600081555b8c6110e9565b600090828252611124601f60208420920160051c8201858301613330565b81835555611100565b015190508a80610db0565b906004850160005260206000209160005b601f198516811061119457509183916001936101609695601f1981161061117b575b505050811b016004840155610dc8565b015160001960f88460031b161c191690558a808061116b565b91926020600181928685015181550194019201611149565b6111db90600486016000526020600020601f850160051c8101916020861061109557601f0160051c0190613330565b89610d92565b015190508980610d4e565b9250600385016000526020600020906000935b601f1984168510611243576001945083601f1981161061122a575b505050811b016003830155610d66565b015160001960f88460031b161c1916905589808061121a565b818101518355602094850194600190930192909101906111ff565b61128d90600387016000526020600020601f850160051c8101916020861061109557601f0160051c0190613330565b8a610d37565b015190508980610cf1565b9250600285016000526020600020906000935b601f19841685106112f5576001945083601f198116106112dc575b505050811b016002830155610d09565b015160001960f88460031b161c191690558980806112cc565b818101518355602094850194600190930192909101906112b1565b61133f90600287016000526020600020601f850160051c8101916020861061109557601f0160051c0190613330565b8a610cda565b015190508980610c94565b9250600185016000526020600020906000935b601f19841685106113a7576001945083601f1981161061138e575b505050811b016001830155610cac565b015160001960f88460031b161c1916905589808061137e565b81810151835560209485019460019093019290910190611363565b6113f190600187016000526020600020601f850160051c8101916020861061109557601f0160051c0190613330565b8a610c7d565b015190508980610c3a565b9250846000526020600020906000935b601f1984168510611453576001945083601f1981161061143a575b505050811b018255610c4f565b015160001960f88460031b161c1916905589808061142d565b81810151835560209485019460019093019290910190611412565b61149a90866000526020600020601f850160051c8101916020861061109557601f0160051c0190613330565b8a610c23565b015190508b80610b4d565b9250836000526020600020906000935b601f19841685106114fc576001945083601f198116106114e3575b505050811b019055610b62565b015160001960f88460031b161c191690558b80806114d6565b818101518355602094850194600190930192909101906114bb565b61154390856000526020600020601f850160051c8101916020861061109557601f0160051c0190613330565b8c610b36565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608490fd5b60405162461bcd60e51b815260206004820152601a60248201527f4167656e7420747970652063616e6e6f7420626520656d7074790000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f74206d696e7420746f207a65726f206164647265737300000000006044820152606490fd5b506007546001600160a01b031633146109e9565b6001600160401b0383351161026c576020806024926116a53685883560e4350101612a01565b815201930192905061099a565b3461026c57600036600319011261026c576007546040516001600160a01b039091168152602090f35b3461026c57600036600319011261026c576116f4612d97565b6116fc61339f565b6007805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a1005b3461026c57604036600319011261026c5761038860043561175c612d88565b9061176961021682612e3b565b60008181526002602052604090205461178c906001600160a01b03161515613432565b6000526009602052600a6040600020019060ff801983541691151516179055565b3461026c576117bb36612d72565b906117c461339f565b6000818152600260205260409020546117e7906001600160a01b03161515613432565b806000526009602081815261180660ff600a6040600020015416613475565b61138884116118ff578260005281815283604060002092600881850154940154801560001461186d57507f4b73d14c380ccba9c394f1550e4bf9155cfaf3a59f9b5a0d1397e3b7279be788935084600052808352604060002001555b6040519384523393a3005b809192508402938085048214901517156118e9578584018094116118e957600181018091116118e95780156118d3577f4b73d14c380ccba9c394f1550e4bf9155cfaf3a59f9b5a0d1397e3b7279be7889385600052828452049060406000200155611862565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6084906040519062461bcd60e51b82526004820152602160248201527f526174696e67206d757374206265206265747765656e203020616e64203530306044820152600360fc1b6064820152fd5b3461026c57604036600319011261026c57611966612aa2565b6001600160a01b03166000908152600a602052604090208054602435919082101561026c576020916104af91612c64565b3461026c57600036600319011261026c576119b0612d97565b600780546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461026c57602036600319011261026c576001600160a01b03611a15612aa2565b168015611a345760005260036020526020604060002054604051908152f35b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b3461026c57602036600319011261026c576020611aa9600435612e3b565b6040516001600160a01b039091168152f35b3461026c57600036600319011261026c57602060ff60075460a01c166040519015158152f35b3461026c57602036600319011261026c5760043560005260096020526040600020611b0b81612ccc565b611b1760018301612ccc565b91611b2460028201612ccc565b611b3060038301612ccc565b91611b3d60048201612ccc565b92600160a01b60019003600583015416936006830154600784015491600885015493600986015495600a015460ff16966040519a8b9a610160808d528c01611b8491612a7d565b8b810360208d0152611b9591612a7d565b8a810360408c0152611ba691612a7d565b89810360608b0152611bb791612a7d565b88810360808a0152611bc891612a7d565b9560a088015260c087015260e086015261010085015261012084015215156101408301520390f35b3461026c576020611c0361047b36612c33565b8101600c815203019020805482101561026c576020916104af91612c64565b3461026c57610388611c3336612ace565b9060405192611c4184612973565b60008452612efe565b3461026c57600036600319011261026c57611c63612d97565b60075460ff8160a01c1615611caa5760ff60a01b19166007556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461026c5760208060031936011261026c576004356001600160401b03811161026c573660238201121561026c578060040135611d2281612c1c565b91611d30604051938461298e565b818352600591821b81016024019084840136831161026c576024869201905b838210611f925750505050815192611d6684612c1c565b93611d74604051958661298e565b808552611d83601f1991612c1c565b018160005b828110611f7c5750505060005b8351811015611f1f57611dc9611dab828661338b565b516000908152600260205260409020546001600160a01b0316151590565b611ddc575b611dd79061337c565b611d95565b611de6818561338b565b516000526009808352604060002090600b60405192611e0484612957565b611e0d81612ccc565b8452600192611e1d848301612ccc565b87860152611e2d60028301612ccc565b6040860152611e3e60038301612ccc565b6060860152611e4f60048301612ccc565b6080860152818801546001600160a01b031660a0860152600682015460c0860152600782015460e08601526008820154610100860152810154610120850152600a81015460ff161515610140850152018054909190611ead81612c1c565b92611ebb604051948561298e565b818452600090815286812090878086015b848310611f025750505050505090611dd79291610160820152611eef828861338b565b52611efa818761338b565b509050611dce565b85918291611f0f86612ccc565b8152019301910190918890611ecc565b508360405191808301818452825180915281604082818701971b8601019301916000955b828710611f505785850386f35b909192938280611f6c600193603f198a82030186528851612b03565b9601920196019592919092611f43565b611f846134f9565b828289010152018290611d88565b81358152908201908201611d4f565b3461026c57600036600319011261026c5760006001600854905b81811115611fce57602083604051908152f35b6000818152600260205260409020546001600160a01b0316151580612016575b612001575b611ffc9061337c565b611fbb565b9161200e611ffc9161337c565b929050611ff3565b5080600052600960205260ff600a6040600020015416611fee565b3461026c5760208060031936011261026c5760043561204e6134f9565b50600081815260026020526040902054612072906001600160a01b03161515613432565b600052600981526040600020906040519161208c83612957565b61209581612ccc565b8352600b6001916120a7838201612ccc565b848601526120b760028201612ccc565b60408601526120c860038201612ccc565b60608601526120d960048201612ccc565b608086015260058101546001600160a01b031660a0860152600681015460c0860152600781015460e086015260088101546101008601526009810154610120860152600a81015460ff16151561014086015201805490919061213a81612c1c565b92612148604051948561298e565b8184526000908152848120858086015b84841061217a5761016089018790526040518281528061044d8185018c612b03565b8591829161218785612ccc565b8152019201920191908690612158565b3461026c57606036600319011261026c576004356121b3612ab8565b9033600052602091600d835260ff6040600020541680156122d7575b6121d89061329f565b6121e061339f565b600082815260026020526040902054612203906001600160a01b03161515613432565b816000526009835261221f60ff600a6040600020015416613475565b6001600160a01b031691821561229c577f6d78589f324fefee4a0445a95d0fa6b8df8211e6f679d4b4b04d98d2d9f0ab7c908260005260098152600860406000200161226b815461337c565b905582600052600e81526040600020846000528152604060002061228f815461337c565b90556040516044358152a3005b6064906040519062461bcd60e51b825260048201526014602482015273496e76616c69642075736572206164647265737360601b6044820152fd5b506007546001600160a01b031633146121cf565b3461026c576103886122fc36612ace565b9161230f61230a8433612f99565b612e9c565b613061565b3461026c57606036600319011261026c576004356001600160401b0360243581811161026c57612348903690600401612a01565b9060443581811161026c57612361903690600401612a01565b61236d61021685612e3b565b600084815260026020526040902054612390906001600160a01b03161515613432565b61239c835115156132e4565b836000526020916009835260036040600020019084519181831161109f576123c48154612c92565b92601f938481116125e1575b50808685821160011461257d57600091612572575b508160011b916000199060031b1c19161790555b8560005260098452600460406000200191835191821161109f5761241d8354612c92565b81811161253a575b50849082116001146124ac579261249c928261248f96937fa204e9f3745f9cc9a01846af596f35e6d839de0ef8062d09214edbbe63cadb9898966000916124a1575b508160011b916000199060031b1c19161790555b604051948594604086526040860190612a7d565b9184830390850152612a7d565b0390a2005b90508301518a612467565b601f1982169083600052856000209160005b8181106125235750837fa204e9f3745f9cc9a01846af596f35e6d839de0ef8062d09214edbbe63cadb9898969361249c969361248f99966001941061250a575b5050811b01905561247b565b85015160001960f88460031b161c191690558a806124fe565b91928760018192868a0151815501940192016124be565b6125639084600052866000208380860160051c820192898710612569575b0160051c0190613330565b87612425565b92508192612558565b9050870151896123e5565b60008481528881209250601f198416905b898b8383106125cc5750505090836001949392106125b3575b5050811b0190556123f9565b89015160001960f88460031b161c1916905589806125a7565b8401518555600190940193928301920161258e565b6126099083600052876000208680850160051c8201928a8610612569570160051c0190613330565b886123d0565b3461026c57604036600319011261026c57612628612aa2565b602435906001600160a01b03808061263f85612e3b565b1692169180831461273a57803314908115612715575b50156126aa57600083815260046020526040902080546001600160a01b0319168317905561268283612e3b565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4005b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b9050600052600560205260406000203360005260205260ff6040600020541684612655565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b3461026c57602036600319011261026c576020611aa9600435612e5e565b3461026c57600036600319011261026c57604051600080546127c881612c92565b8084529060019081811690811561085e57506001146127f15761044d846107f18186038261298e565b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106128325750505081016020016107f1826107e1565b8054602085870181019190915290930192810161281a565b3461026c5760208060031936011261026c576004356001600160401b03811161026c57816104f261287f923690600401612a01565b8101600b81520301902090604051908181845491828152019360005281600020916000905b8282106128bb5761044d856104418189038261298e565b8354865294850194600193840193909101906128a4565b3461026c57602036600319011261026c576004359063ffffffff60e01b821680920361026c57602091632483248360e11b8114908115612914575b5015158152f35b6380ac58cd60e01b811491508115612946575b8115612935575b508361290d565b6301ffc9a760e01b1490508361292e565b635b5e139f60e01b81149150612927565b61018081019081106001600160401b0382111761109f57604052565b602081019081106001600160401b0382111761109f57604052565b90601f801991011681019081106001600160401b0382111761109f57604052565b6001600160401b03811161109f57601f01601f191660200190565b9291926129d6826129af565b916129e4604051938461298e565b82948184528183011161026c578281602093846000960137010152565b9080601f8301121561026c57816020612a1c933591016129ca565b90565b6020908160408183019282815285518094520193019160005b828110612a46575050505090565b835185529381019392810192600101612a38565b60005b838110612a6d5750506000910152565b8181015183820152602001612a5d565b90602091612a9681518092818552858086019101612a5a565b601f01601f1916010190565b600435906001600160a01b038216820361026c57565b602435906001600160a01b038216820361026c57565b606090600319011261026c576001600160a01b0390600435828116810361026c5791602435908116810361026c579060443590565b90612b178251610180808452830190612a7d565b612b6c612b5a612b48612b366020948588015187820387890152612a7d565b60408701518682036040880152612a7d565b60608601518582036060870152612a7d565b60808501518482036080860152612a7d565b9160018060a01b0360a08501511660a082015260c084015160c082015260e084015160e0820152610100808501519082015261012080850151908201526101408085015115159082015261016080940151938184039101528251908183528083019281808460051b8301019501936000915b848310612bee5750505050505090565b9091929394958480612c0c600193601f198682030187528a51612a7d565b9801930193019194939290612bde565b6001600160401b03811161109f5760051b60200190565b604060031982011261026c57600435906001600160401b03821161026c57612c5d91600401612a01565b9060243590565b8054821015612c7c5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015612cc2575b6020831014612cac57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612ca1565b9060405191826000825492612ce084612c92565b908184526001948581169081600014612d4f5750600114612d0c575b5050612d0a9250038361298e565b565b9093915060005260209081600020936000915b818310612d37575050612d0a93508201013880612cfc565b85548884018501529485019487945091830191612d1f565b915050612d0a94506020925060ff191682840152151560051b8201013880612cfc565b604090600319011261026c576004359060243590565b60243590811515820361026c57565b6007546001600160a01b03163303612dab57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15612df657565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b0316612a1c811515612def565b600081815260026020526040902054612e81906001600160a01b03161515612def565b6000908152600460205260409020546001600160a01b031690565b15612ea357565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b90612f22939291612f1261230a8433612f99565b612f1d838383613061565b61317a565b15612f2957565b60405162461bcd60e51b815280612f4260048201612f46565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b906001600160a01b038080612fad84612e3b565b16931691838314938415612fe0575b508315612fca575b50505090565b612fd691929350612e5e565b1614388080612fc4565b909350600052600560205260406000208260005260205260ff604060002054169238612fbc565b1561300e57565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b906130899161306f84612e3b565b6001600160a01b0393918416928492909183168414613007565b1691821561312957816130ae9161309e61339f565b6130a786612e3b565b1614613007565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526004602052604081206001600160601b0360a01b9081815416905583825260036020526040822060001981540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9293600093909291803b15613294579484916131d49660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190612a7d565b0393165af1849181613250575b5061323f575050503d600014613237573d6131fb816129af565b90613209604051928361298e565b81528091833d92013e5b805191826132345760405162461bcd60e51b815280612f4260048201612f46565b01fd5b506060613213565b6001600160e01b0319161492509050565b9091508581813d831161328d575b613268818361298e565b8101031261328957516001600160e01b0319811681036132895790386131e1565b8480fd5b503d61325e565b505050915050600190565b156132a657565b60405162461bcd60e51b8152602060048201526016602482015275139bdd08185d5d1a1bdc9a5e9959081d1bc81b5a5b9d60521b6044820152606490fd5b156132eb57565b60405162461bcd60e51b815260206004820152601960248201527f436f646520686173682063616e6e6f7420626520656d707479000000000000006044820152606490fd5b81811061333b575050565b60008155600101613330565b8054600160401b81101561109f5761336491600182018155612c64565b819291549060031b91821b91600019901b1916179055565b60001981146118e95760010190565b8051821015612c7c5760209160051b010190565b60ff60075460a01c166133ae57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b156133ed57565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b1561343957565b60405162461bcd60e51b81526020600482015260146024820152731059d95b9d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b1561347c57565b60405162461bcd60e51b81526020600482015260136024820152724167656e74206973206e6f742061637469766560681b6044820152606490fd5b156134be57565b60405162461bcd60e51b81526020600482015260136024820152722737ba103a34329030b3b2b73a1037bbb732b960691b6044820152606490fd5b6040519061350682612957565b81610160606091828152826020820152826040820152828082015282608082015260008060a08301528060c08301528060e08301528061010083015280610120830152610140820152015256fea264697066735822122072263bd21b4309881335c2af141f30520cb971322c4474f8473eb16a4950d6bb64736f6c63430008130033";

    public static final String FUNC_AGENTUSAGE = "agentUsage";

    public static final String FUNC_AGENTS = "agents";

    public static final String FUNC_AGENTSBYCAPABILITY = "agentsByCapability";

    public static final String FUNC_AGENTSBYTYPE = "agentsByType";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_AUTHORIZEDMINTERS = "authorizedMinters";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CREATEAGENT = "createAgent";

    public static final String FUNC_CREATORAGENTS = "creatorAgents";

    public static final String FUNC_GETACTIVEAGENTCOUNT = "getActiveAgentCount";

    public static final String FUNC_GETAGENT = "getAgent";

    public static final String FUNC_GETAGENTSBATCH = "getAgentsBatch";

    public static final String FUNC_GETAGENTSBYCAPABILITY = "getAgentsByCapability";

    public static final String FUNC_GETAGENTSBYCREATOR = "getAgentsByCreator";

    public static final String FUNC_GETAGENTSBYTYPE = "getAgentsByType";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETTOTALAGENTCOUNT = "getTotalAgentCount";

    public static final String FUNC_GETUSERAGENTUSAGE = "getUserAgentUsage";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RATEAGENT = "rateAgent";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAGENTACTIVE = "setAgentActive";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETAUTHORIZEDMINTER = "setAuthorizedMinter";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_UPDATEAGENTCODE = "updateAgentCode";

    public static final String FUNC_UPDATEAGENTPRICE = "updateAgentPrice";

    public static final String FUNC_USEAGENT = "useAgent";

    public static final Event AGENTCREATED_EVENT = new Event("AgentCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AGENTPRICEUPDATED_EVENT = new Event("AgentPriceUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AGENTRATED_EVENT = new Event("AgentRated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AGENTUPDATED_EVENT = new Event("AgentUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AGENTUSED_EVENT = new Event("AgentUsed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected AgentNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AgentNFT(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AgentNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AgentNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AgentCreatedEventResponse> getAgentCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AGENTCREATED_EVENT, transactionReceipt);
        ArrayList<AgentCreatedEventResponse> responses = new ArrayList<AgentCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AgentCreatedEventResponse typedResponse = new AgentCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.agentType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AgentCreatedEventResponse getAgentCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AGENTCREATED_EVENT, log);
        AgentCreatedEventResponse typedResponse = new AgentCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.agentType = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AgentCreatedEventResponse> agentCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAgentCreatedEventFromLog(log));
    }

    public Flowable<AgentCreatedEventResponse> agentCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AGENTCREATED_EVENT));
        return agentCreatedEventFlowable(filter);
    }

    public static List<AgentPriceUpdatedEventResponse> getAgentPriceUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AGENTPRICEUPDATED_EVENT, transactionReceipt);
        ArrayList<AgentPriceUpdatedEventResponse> responses = new ArrayList<AgentPriceUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AgentPriceUpdatedEventResponse typedResponse = new AgentPriceUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.oldPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AgentPriceUpdatedEventResponse getAgentPriceUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AGENTPRICEUPDATED_EVENT, log);
        AgentPriceUpdatedEventResponse typedResponse = new AgentPriceUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.oldPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AgentPriceUpdatedEventResponse> agentPriceUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAgentPriceUpdatedEventFromLog(log));
    }

    public Flowable<AgentPriceUpdatedEventResponse> agentPriceUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AGENTPRICEUPDATED_EVENT));
        return agentPriceUpdatedEventFlowable(filter);
    }

    public static List<AgentRatedEventResponse> getAgentRatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AGENTRATED_EVENT, transactionReceipt);
        ArrayList<AgentRatedEventResponse> responses = new ArrayList<AgentRatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AgentRatedEventResponse typedResponse = new AgentRatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.rater = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.rating = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AgentRatedEventResponse getAgentRatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AGENTRATED_EVENT, log);
        AgentRatedEventResponse typedResponse = new AgentRatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.rater = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.rating = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AgentRatedEventResponse> agentRatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAgentRatedEventFromLog(log));
    }

    public Flowable<AgentRatedEventResponse> agentRatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AGENTRATED_EVENT));
        return agentRatedEventFlowable(filter);
    }

    public static List<AgentUpdatedEventResponse> getAgentUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AGENTUPDATED_EVENT, transactionReceipt);
        ArrayList<AgentUpdatedEventResponse> responses = new ArrayList<AgentUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AgentUpdatedEventResponse typedResponse = new AgentUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newCodeHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newModelHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AgentUpdatedEventResponse getAgentUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AGENTUPDATED_EVENT, log);
        AgentUpdatedEventResponse typedResponse = new AgentUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newCodeHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.newModelHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AgentUpdatedEventResponse> agentUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAgentUpdatedEventFromLog(log));
    }

    public Flowable<AgentUpdatedEventResponse> agentUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AGENTUPDATED_EVENT));
        return agentUpdatedEventFlowable(filter);
    }

    public static List<AgentUsedEventResponse> getAgentUsedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AGENTUSED_EVENT, transactionReceipt);
        ArrayList<AgentUsedEventResponse> responses = new ArrayList<AgentUsedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AgentUsedEventResponse typedResponse = new AgentUsedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.cost = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AgentUsedEventResponse getAgentUsedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AGENTUSED_EVENT, log);
        AgentUsedEventResponse typedResponse = new AgentUsedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.cost = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AgentUsedEventResponse> agentUsedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAgentUsedEventFromLog(log));
    }

    public Flowable<AgentUsedEventResponse> agentUsedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AGENTUSED_EVENT));
        return agentUsedEventFlowable(filter);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BatchMetadataUpdateEventResponse getBatchMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
        BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBatchMetadataUpdateEventFromLog(log));
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public static List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MetadataUpdateEventResponse getMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, log);
        MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMetadataUpdateEventFromLog(log));
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> agentUsage(BigInteger param0, String param1) {
        final Function function = new Function(FUNC_AGENTUSAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple11<String, String, String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>> agents(BigInteger param0) {
        final Function function = new Function(FUNC_AGENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple11<String, String, String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple11<String, String, String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple11<String, String, String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<String, String, String, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (Boolean) results.get(10).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> agentsByCapability(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_AGENTSBYCAPABILITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> agentsByType(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_AGENTSBYTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> authorizedMinters(String param0) {
        final Function function = new Function(FUNC_AUTHORIZEDMINTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createAgent(String to, String name, String description, String agentType, String codeHash, String modelHash, BigInteger price, List<String> capabilities, String metadataURI) {
        final Function function = new Function(
                FUNC_CREATEAGENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(description), 
                new org.web3j.abi.datatypes.Utf8String(agentType), 
                new org.web3j.abi.datatypes.Utf8String(codeHash), 
                new org.web3j.abi.datatypes.Utf8String(modelHash), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(capabilities, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.Utf8String(metadataURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> creatorAgents(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_CREATORAGENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getActiveAgentCount() {
        final Function function = new Function(FUNC_GETACTIVEAGENTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Agent> getAgent(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAGENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Agent>() {}));
        return executeRemoteCallSingleValueReturn(function, Agent.class);
    }

    public RemoteFunctionCall<List> getAgentsBatch(List<BigInteger> tokenIds) {
        final Function function = new Function(FUNC_GETAGENTSBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(tokenIds, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Agent>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAgentsByCapability(String capability) {
        final Function function = new Function(FUNC_GETAGENTSBYCAPABILITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(capability)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAgentsByCreator(String creator) {
        final Function function = new Function(FUNC_GETAGENTSBYCREATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, creator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAgentsByType(String agentType) {
        final Function function = new Function(FUNC_GETAGENTSBYTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(agentType)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalAgentCount() {
        final Function function = new Function(FUNC_GETTOTALAGENTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getUserAgentUsage(BigInteger tokenId, String user) {
        final Function function = new Function(FUNC_GETUSERAGENTUSAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> rateAgent(BigInteger tokenId, BigInteger rating) {
        final Function function = new Function(
                FUNC_RATEAGENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(rating)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAgentActive(BigInteger tokenId, Boolean active) {
        final Function function = new Function(
                FUNC_SETAGENTACTIVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Bool(active)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthorizedMinter(String minter, Boolean authorized) {
        final Function function = new Function(
                FUNC_SETAUTHORIZEDMINTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, minter), 
                new org.web3j.abi.datatypes.Bool(authorized)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAgentCode(BigInteger tokenId, String newCodeHash, String newModelHash) {
        final Function function = new Function(
                FUNC_UPDATEAGENTCODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(newCodeHash), 
                new org.web3j.abi.datatypes.Utf8String(newModelHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateAgentPrice(BigInteger tokenId, BigInteger newPrice) {
        final Function function = new Function(
                FUNC_UPDATEAGENTPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(newPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> useAgent(BigInteger tokenId, String user, BigInteger cost) {
        final Function function = new Function(
                FUNC_USEAGENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint256(cost)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AgentNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AgentNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AgentNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AgentNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AgentNFT load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AgentNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AgentNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AgentNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AgentNFT> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AgentNFT.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<AgentNFT> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AgentNFT.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AgentNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AgentNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AgentNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AgentNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Agent extends DynamicStruct {
        public String name;

        public String description;

        public String agentType;

        public String codeHash;

        public String modelHash;

        public String creator;

        public BigInteger price;

        public BigInteger createdAt;

        public BigInteger usageCount;

        public BigInteger rating;

        public Boolean isActive;

        public List<String> capabilities;

        public Agent(String name, String description, String agentType, String codeHash, String modelHash, String creator, BigInteger price, BigInteger createdAt, BigInteger usageCount, BigInteger rating, Boolean isActive, List<String> capabilities) {
            super(new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.Utf8String(description), 
                    new org.web3j.abi.datatypes.Utf8String(agentType), 
                    new org.web3j.abi.datatypes.Utf8String(codeHash), 
                    new org.web3j.abi.datatypes.Utf8String(modelHash), 
                    new org.web3j.abi.datatypes.Address(160, creator), 
                    new org.web3j.abi.datatypes.generated.Uint256(price), 
                    new org.web3j.abi.datatypes.generated.Uint256(createdAt), 
                    new org.web3j.abi.datatypes.generated.Uint256(usageCount), 
                    new org.web3j.abi.datatypes.generated.Uint256(rating), 
                    new org.web3j.abi.datatypes.Bool(isActive), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(capabilities, org.web3j.abi.datatypes.Utf8String.class)));
            this.name = name;
            this.description = description;
            this.agentType = agentType;
            this.codeHash = codeHash;
            this.modelHash = modelHash;
            this.creator = creator;
            this.price = price;
            this.createdAt = createdAt;
            this.usageCount = usageCount;
            this.rating = rating;
            this.isActive = isActive;
            this.capabilities = capabilities;
        }

        public Agent(Utf8String name, Utf8String description, Utf8String agentType, Utf8String codeHash, Utf8String modelHash, Address creator, Uint256 price, Uint256 createdAt, Uint256 usageCount, Uint256 rating, Bool isActive, DynamicArray<Utf8String> capabilities) {
            super(name, description, agentType, codeHash, modelHash, creator, price, createdAt, usageCount, rating, isActive, capabilities);
            this.name = name.getValue();
            this.description = description.getValue();
            this.agentType = agentType.getValue();
            this.codeHash = codeHash.getValue();
            this.modelHash = modelHash.getValue();
            this.creator = creator.getValue();
            this.price = price.getValue();
            this.createdAt = createdAt.getValue();
            this.usageCount = usageCount.getValue();
            this.rating = rating.getValue();
            this.isActive = isActive.getValue();
            this.capabilities = capabilities.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
        }
    }

    public static class AgentCreatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String creator;

        public String name;

        public String agentType;

        public BigInteger price;
    }

    public static class AgentPriceUpdatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public BigInteger oldPrice;

        public BigInteger newPrice;
    }

    public static class AgentRatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String rater;

        public BigInteger rating;
    }

    public static class AgentUpdatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String newCodeHash;

        public String newModelHash;
    }

    public static class AgentUsedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String user;

        public BigInteger cost;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
