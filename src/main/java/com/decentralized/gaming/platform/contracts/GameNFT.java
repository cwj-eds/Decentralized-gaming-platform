package com.decentralized.gaming.platform.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.10.3.
 */
@SuppressWarnings("rawtypes")
public class GameNFT extends Contract {
    public static final String BINARY = "0x6080346200035b576001600160401b039060408181018381118382101762000345578152600882526020916711d85b594813919560c21b838201528151938285018581108282111762000345578352600485526347414d4560e01b84860152815181811162000345576000948554916001948584811c941680156200033a575b8385101462000326578190601f94858111620002d3575b5083908583116001146200026f57899262000263575b5050600019600383901b1c191690851b1786555b86519283116200024f5783548481811c9116801562000244575b828210146200023057828111620001e8575b50809183116001146200018157508495829394959262000175575b5050600019600383901b1c191690821b1790555b60075490519133906001600160a01b038316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36001600160a81b0319163360ff60a01b191617600755612f169081620003618239f35b01519050388062000107565b90601f198316968487528287209287905b898210620001d0575050838596979810620001b6575b505050811b0190556200011b565b015160001960f88460031b161c19169055388080620001a8565b80878596829496860151815501950193019062000192565b8487528187208380860160051c82019284871062000226575b0160051c019085905b8281106200021a575050620000ec565b8881550185906200020a565b9250819262000201565b634e487b7160e01b87526022600452602487fd5b90607f1690620000da565b634e487b7160e01b86526041600452602486fd5b015190503880620000ac565b898052848a208894509190601f1984168b5b87828210620002bc5750508411620002a2575b505050811b018655620000c0565b015160001960f88460031b161c1916905538808062000294565b8385015186558b9790950194938401930162000281565b9091508880528389208580850160051c8201928686106200031c575b918991869594930160051c01915b8281106200030d57505062000096565b8b8155859450899101620002fd565b92508192620002ef565b634e487b7160e01b88526022600452602488fd5b93607f16936200007f565b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146123fa5750806302f9cbf91461235f57806306fdde03146122bc578063081812fc1461229e578063095ea7b314612124578063117a5b901461203f57806322e5d86414611ff557806323b872dd14611fcc5780633f4ba83a14611f3057806342842e0e14611f08578063546dd73514611e8f5780635c975abb14611e695780636352211e14611e3957806370a0823114611da2578063715018a614611d4557806375b47bb814611b965780638456cb5914611b3457806387fd338714611aa45780638da5cb5b14611a7b5780639083e016146119f757806395d89b4114611918578063a22cb46514611853578063a2f77bcc146115c7578063a45cdc76146114e8578063a81f9d801461089f578063a8667b3c14610881578063aa2fe91b14610842578063b88d4fde146107e3578063bd2b01b314610768578063c87b56dd146106f2578063d37bb879146103ee578063d44c6a8014610301578063e985e9c5146102ab578063ed58bad8146102695763f2fde38b146101a057600080fd5b34610264576020366003190112610264576101b96125ca565b6101c161277f565b6001600160a01b0390811690811561021057600754826001600160601b0360a01b821617600755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b600080fd5b34610264576102a961027a36612739565b9061028361277f565b60018060a01b0316600052600c60205260406000209060ff801983541691151516179055565b005b34610264576040366003190112610264576102c46125ca565b6102cc6125e0565b9060018060a01b03809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b346102645760403660031901126102645760043561031d6125e0565b33600052600c60205260ff6040600020541680156103da575b61033f90612c87565b610347612d89565b60008281526002602052604090205461036f906001600160a01b03161515612e5d565b612e5d565b81600052600960205261038c60ff60086040600020015416612e9f565b81600052600960205260066040600020016103a78154612d64565b90556001600160a01b0316907f3ecfc84e90115d8ec60316066410975e1e196858752f1e99c2c113aeb5bacbdb600080a3005b506007546001600160a01b03163314610336565b34610264576060366003190112610264576001600160401b0360043560243582811161026457610422903690600401612529565b6044358381116102645761043a903690600401612529565b61045661044684612823565b6001600160a01b03163314612e1c565b600083815260026020526040902054610479906001600160a01b03161515612e5d565b61048582511515612ccc565b82600052602090600982526002604060002001835190868211610640576104ac81546125f6565b91601f928381116106c4575b50808584821160011461066157600091610656575b508160011b916000199060031b1c19161790555b846000526009835260036040600020019180519687116106405761050583546125f6565b828111610608575b5083918711600114610580579580917fe4eb2cdda15530da54effb0945228d2f1f67c1c9f73627028f170faac639fbfd9697600092610575575b50508160011b916000199060031b1c19161790555b6105706040519282849384528301906125a5565b0390a2005b015190508780610547565b90601f1987169183600052846000209260005b8181106105f157509160019391897fe4eb2cdda15530da54effb0945228d2f1f67c1c9f73627028f170faac639fbfd999a94106105d8575b505050811b01905561055c565b015160001960f88460031b161c191690558780806105cb565b929386600181928786015181550195019301610593565b61063190846000528560002084808b0160051c820192888c10610637575b0160051c0190612d18565b8761050d565b92508192610626565b634e487b7160e01b600052604160045260246000fd5b9050860151896104cd565b60008481528781209250601f198416905b888282106106ae5750509083600194939210610695575b5050811b0190556104e1565b88015160001960f88460031b161c191690558980610689565b600184958293958d015181550194019201610672565b6106ec9083600052866000208580850160051c820192898610610637570160051c0190612d18565b886104b8565b3461026457602036600319011261026457600435600081815260026020526040902054610729906001600160a01b031615156127d7565b60005260066020526107646107416040600020612630565b600060405161074f8161249b565b526040519182916020835260208301906125a5565b0390f35b346102645760203660031901126102645760043561078861044682612823565b6000818152600260205260409020546107ab906001600160a01b03161515612e5d565b8060005260096020526107c860ff60086040600020015416612e9f565b6000908152600960205260409020600801805460ff19169055005b34610264576080366003190112610264576107fc6125ca565b6108046125e0565b606435916001600160401b0383116102645736602384011215610264576108386102a99336906024816004013591016124f2565b91604435916128e6565b34610264576020366003190112610264576001600160a01b036108636125ca565b16600052600c602052602060ff604060002054166040519015158152f35b34610264576000366003190112610264576020600854604051908152f35b346102645760e0366003190112610264576108b86125ca565b6024356001600160401b038111610264576108d7903690600401612529565b6044356001600160401b038111610264576108f6903690600401612529565b6064356001600160401b03811161026457610915903690600401612529565b6084356001600160401b03811161026457610934903690600401612529565b926001600160401b0360a435116102645736602360a4350112156102645760a435600401359261096384612768565b9361097160405195866124b6565b80855260208501903660248260051b60a43501011161026457602460a43501915b60248260051b60a435010183106114b55750505060c4356001600160401b038111610264576109c5903690600401612529565b9433600052600c60205260ff6040600020541680156114a1575b6109e890612c87565b6109f0612d89565b6001600160a01b0387161561145c5782511561141f57610a1284511515612ccc565b6001600854019586600855610a45610a3f88600052600260205260018060a01b0360406000205416151590565b15612dd0565b610a4d612d89565b600087815260026020526040902054610a70906001600160a01b03161515610a3f565b6001600160a01b0388166000818152600360209081526040808320805460010190558a83526002909152812080546001600160a01b031916831790558891907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a46000878152600260205260409020546001600160a01b0316156113c3578660005260066020526040600020908051906001600160401b038211610640578190610b1c84546125f6565b601f8111611391575b50602090601f83116001146113255760009261131a575b50508160011b916000199060031b1c19161790555b7ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce76020604051888152a160405191610b888361247f565b8383526020830152836040830152606082015260018060a01b03861660808201524260a0820152600060c0820152600060e082015260006101008201528361012082015284600052600960205260406000209080518051906001600160401b038211610640578190610bfa85546125f6565b601f81116112e8575b50602090601f831160011461127c57600092611271575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211610640578190610c5460018601546125f6565b601f811161123c575b50602090601f83116001146111ca576000926111bf575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610640578190610cb160028601546125f6565b601f811161118a575b50602090601f83116001146111185760009261110d575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b03821161064057610d0c60038501546125f6565b601f81116110d8575b50602090601f83116001146110645761012093929160009183611059575b50508160011b916000199060031b1c19161760038401555b6004830160018060a01b036080830151166001600160601b0360a01b82541617905560a0810151600584015560c0810151600684015560e08101516007840155610dab6101008201511515600885019060ff801983541691151516179055565b0151805190600160401b8211610640576009830154826009850155808310610fe1575b5060206009910192016000526020600020916000905b828210610ec1575050505060018060a01b038516600052600a602052610e0e846040600020612d2f565b60005b8351811015610e5c5780610e5286610e43602080610e579660051b8a0101518160405193828580945193849201612582565b8101600b815203019020612d2f565b612d64565b610e11565b60208584817fdc9639fd3a3724a8b55b0f81c74689da7cba53be46f2fb7160ac84ea0ecd5e62610e9e87610eb68d6040519384936040855260408501906125a5565b8381038a8501526001600160a01b03909116966125a5565b0390a3604051908152f35b80518051906001600160401b03821161064057610ede86546125f6565b601f8111610fa4575b50602090601f8311600114610f34579282600194936020938695600092610f29575b5050600019600383901b1c191690841b1787555b01940191019092610de4565b015190508e80610f09565b908660005260206000209160005b601f1985168110610f8c575083602093600196938796938794601f19811610610f73575b505050811b018755610f1d565b015160001960f88460031b161c191690558e8080610f66565b91926020600181928685015181550194019201610f42565b610fd190876000526020600020601f850160051c81019160208610610fd7575b601f0160051c0190612d18565b8b610ee7565b9091508190610fc4565b600984016000526020600020908382015b8183018110611002575050610dce565b8061100f600192546125f6565b8061101c575b5001610ff2565b601f811183146110325750600081555b8c611015565b600090828252611050601f60208420920160051c8201858301612d18565b8183555561102c565b015190508a80610d33565b906003850160005260206000209160005b601f19851681106110c057509183916001936101209695601f198116106110a7575b505050811b016003840155610d4b565b015160001960f88460031b161c191690558a8080611097565b91926020600181928685015181550194019201611075565b61110790600386016000526020600020601f850160051c81019160208610610fd757601f0160051c0190612d18565b89610d15565b015190508980610cd1565b9250600285016000526020600020906000935b601f198416851061116f576001945083601f19811610611156575b505050811b016002830155610ce9565b015160001960f88460031b161c19169055898080611146565b8181015183556020948501946001909301929091019061112b565b6111b990600287016000526020600020601f850160051c81019160208610610fd757601f0160051c0190612d18565b8a610cba565b015190508980610c74565b9250600185016000526020600020906000935b601f1984168510611221576001945083601f19811610611208575b505050811b016001830155610c8c565b015160001960f88460031b161c191690558980806111f8565b818101518355602094850194600190930192909101906111dd565b61126b90600187016000526020600020601f850160051c81019160208610610fd757601f0160051c0190612d18565b8a610c5d565b015190508980610c1a565b9250846000526020600020906000935b601f19841685106112cd576001945083601f198116106112b4575b505050811b018255610c2f565b015160001960f88460031b161c191690558980806112a7565b8181015183556020948501946001909301929091019061128c565b61131490866000526020600020601f850160051c81019160208610610fd757601f0160051c0190612d18565b8a610c03565b015190508a80610b3c565b9250836000526020600020906000935b601f1984168510611376576001945083601f1981161061135d575b505050811b019055610b51565b015160001960f88460031b161c191690558a8080611350565b81810151835560209485019460019093019290910190611335565b6113bd90856000526020600020601f850160051c81019160208610610fd757601f0160051c0190612d18565b8b610b25565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608490fd5b60405162461bcd60e51b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f74206d696e7420746f207a65726f206164647265737300000000006044820152606490fd5b506007546001600160a01b031633146109df565b6001600160401b03833511610264576020806024926114db3685883560a4350101612529565b8152019301929050610992565b346102645760203660031901126102645760043561150861044682612823565b60008181526002602052604090205461152b906001600160a01b03161515612e5d565b80600052600960205260ff60086040600020015416611589578060005260096020526008604060002001600160ff1982541617905533907fb20360469d28f8221ddbef6b3813741eb0682226d1493dd80411402da7a9c321600080a3005b60405162461bcd60e51b815260206004820152601660248201527511d85b5948185b1c9958591e481c1d589b1a5cda195960521b6044820152606490fd5b346102645760203660031901126102645760043560606101206040516115ec8161247f565b828152826020820152826040820152828082015260006080820152600060a0820152600060c0820152600060e08201526000610100820152015261164861036a82600052600260205260018060a01b0360406000205416151590565b600052600960205260406000206009604051916116648361247f565b61166d81612630565b835261167b60018201612630565b602084015261168c60028201612630565b604084015261169d60038201612630565b606084015260048101546001600160a01b03166080840152600581015460a0840152600681015460c0840152600781015460e0840152600881015460ff1615156101008401520180546116ef81612768565b916116fd60405193846124b6565b818352602083019060005260206000206000915b83831061183657858561012082015260405180916020825261012061178f61177961176361174d855161014060208901526101608801906125a5565b6020860151878203601f190160408901526125a5565b6040850151868203601f190160608801526125a5565b6060840151858203601f190160808701526125a5565b9160018060a01b0360808201511660a085015260a081015160c085015260c081015160e085015260e0810151610100850152610100810151151582850152015190601f1983820301610140840152815180825260208201916020808360051b8301019401926000915b8383106118055786860387f35b919395509193602080611824600193601f1986820301875289516125a5565b970193019301909286959492936117f8565b60016020819261184585612630565b815201920192019190611711565b346102645761186136612739565b6001600160a01b03909116903382146118d3573360005260056020526040600020826000526020526118a38160406000209060ff801983541691151516179055565b60405190151581527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b34610264576000366003190112610264576040516000600180549061193c826125f6565b808552918181169081156119d05750600114611977575b61076484611963818603826124b6565b6040519182916020835260208301906125a5565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106119b857505050810160200161196382611953565b805460208587018101919091529093019281016119a0565b60ff191660208087019190915292151560051b850190920192506119639150839050611953565b3461026457602080600319360112610264576001600160a01b03611a196125ca565b16600052600a8152604060002090604051908181845491828152019360005281600020916000905b828210611a645761076485611a58818903826124b6565b60405191829182612547565b835486529485019460019384019390910190611a41565b34610264576000366003190112610264576007546040516001600160a01b039091168152602090f35b34610264576000366003190112610264576000600160088054915b82811115611ad257602084604051908152f35b6000818152600260205260409020546001600160a01b0316151580611b1a575b611b05575b611b0090612d64565b611abf565b92611b12611b0091612d64565b939050611af7565b5080600052600960205260ff826040600020015416611af2565b3461026457600036600319011261026457611b4d61277f565b611b55612d89565b6007805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a1005b346102645760403660031901126102645760248035600435611bb6612d89565b600081815260026020526040902054611bd9906001600160a01b03161515612e5d565b80600052602060098152611bf760ff60086040600020015416612e9f565b6113888311611cf8578160005260098152604060002060066007820154910154908115600014611c66575050817f2454669b08895ead768bac1dd3707ef626151fed06d0e0b196857eea65d0f03d9293945060005260098152836007604060002001555b6040519384523393a3005b81810290808204831490151715611ce357848101809111611ce35760018201809211611ce3578115611cce57837f2454669b08895ead768bac1dd3707ef626151fed06d0e0b196857eea65d0f03d949596506000526009835204600760406000200155611c5b565b85634e487b7160e01b60005260126004526000fd5b85634e487b7160e01b60005260116004526000fd5b6084906021856040519262461bcd60e51b845260048401528201527f526174696e67206d757374206265206265747765656e203020616e64203530306044820152600360fc1b6064820152fd5b3461026457600036600319011261026457611d5e61277f565b600780546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610264576020366003190112610264576001600160a01b03611dc36125ca565b168015611de25760005260036020526020604060002054604051908152f35b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b34610264576020366003190112610264576020611e57600435612823565b6040516001600160a01b039091168152f35b3461026457600036600319011261026457602060ff60075460a01c166040519015158152f35b34610264576040366003190112610264576004356001600160401b03811161026457611ebf903690600401612529565b611edb6020602435928160405193828580945193849201612582565b8101600b815203019020805482101561026457602091611efa916126d6565b90546040519160031b1c8152f35b34610264576102a9611f1936612704565b9060405192611f278461249b565b600084526128e6565b3461026457600036600319011261026457611f4961277f565b60075460ff8160a01c1615611f905760ff60a01b19166007556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b34610264576102a9611fdd36612704565b91611ff0611feb8433612981565b612884565b612a49565b346102645760403660031901126102645761200e6125ca565b6001600160a01b03166000908152600a602052604090208054602435919082101561026457602091611efa916126d6565b346102645760203660031901126102645760043560005260096020526120d9604060002061206c81612630565b9061207960018201612630565b61208560028301612630565b9161209260038201612630565b9260018060a01b03600483015416936121036005840154916120f56006860154946120e760ff600860078a015499015416986040519c8d9c8d6101209081815201906125a5565b8c810360208e0152906125a5565b908a820360408c01526125a5565b9088820360608a01526125a5565b94608087015260a086015260c085015260e084015215156101008301520390f35b346102645760403660031901126102645761213d6125ca565b602435906001600160a01b03808061215485612823565b1692169180831461224f5780331490811561222a575b50156121bf57600083815260046020526040902080546001600160a01b0319168317905561219783612823565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4005b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b9050600052600560205260406000203360005260205260ff604060002054168461216a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b34610264576020366003190112610264576020611e57600435612846565b3461026457600036600319011261026457604051600080546122dd816125f6565b808452906001908181169081156119d057506001146123065761076484611963818603826124b6565b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061234757505050810160200161196382611953565b8054602085870181019190915290930192810161232f565b3461026457602080600319360112610264576004356001600160401b03811161026457816123946123a7923690600401612529565b8160405193828580945193849201612582565b8101600b81520301902090604051908181845491828152019360005281600020916000905b8282106123e35761076485611a58818903826124b6565b8354865294850194600193840193909101906123cc565b34610264576020366003190112610264576004359063ffffffff60e01b821680920361026457602091632483248360e11b811490811561243c575b5015158152f35b6380ac58cd60e01b81149150811561246e575b811561245d575b5083612435565b6301ffc9a760e01b14905083612456565b635b5e139f60e01b8114915061244f565b61014081019081106001600160401b0382111761064057604052565b602081019081106001600160401b0382111761064057604052565b90601f801991011681019081106001600160401b0382111761064057604052565b6001600160401b03811161064057601f01601f191660200190565b9291926124fe826124d7565b9161250c60405193846124b6565b829481845281830111610264578281602093846000960137010152565b9080601f8301121561026457816020612544933591016124f2565b90565b6020908160408183019282815285518094520193019160005b82811061256e575050505090565b835185529381019392810192600101612560565b60005b8381106125955750506000910152565b8181015183820152602001612585565b906020916125be81518092818552858086019101612582565b601f01601f1916010190565b600435906001600160a01b038216820361026457565b602435906001600160a01b038216820361026457565b90600182811c92168015612626575b602083101461261057565b634e487b7160e01b600052602260045260246000fd5b91607f1691612605565b9060405191826000825492612644846125f6565b9081845260019485811690816000146126b35750600114612670575b505061266e925003836124b6565b565b9093915060005260209081600020936000915b81831061269b57505061266e93508201013880612660565b85548884018501529485019487945091830191612683565b91505061266e94506020925060ff191682840152151560051b8201013880612660565b80548210156126ee5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6060906003190112610264576001600160a01b0390600435828116810361026457916024359081168103610264579060443590565b6040906003190112610264576004356001600160a01b0381168103610264579060243580151581036102645790565b6001600160401b0381116106405760051b60200190565b6007546001600160a01b0316330361279357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156127de57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b03166125448115156127d7565b600081815260026020526040902054612869906001600160a01b031615156127d7565b6000908152600460205260409020546001600160a01b031690565b1561288b57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b9061290a9392916128fa611feb8433612981565b612905838383612a49565b612b62565b1561291157565b60405162461bcd60e51b81528061292a6004820161292e565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b906001600160a01b03808061299584612823565b169316918383149384156129c8575b5083156129b2575b50505090565b6129be91929350612846565b16143880806129ac565b909350600052600560205260406000208260005260205260ff6040600020541692386129a4565b156129f657565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b90612a7191612a5784612823565b6001600160a01b03939184169284929091831684146129ef565b16918215612b115781612a9691612a86612d89565b612a8f86612823565b16146129ef565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526004602052604081206001600160601b0360a01b9081815416905583825260036020526040822060001981540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9293600093909291803b15612c7c57948491612bbc9660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c9760848301906125a5565b0393165af1849181612c38575b50612c27575050503d600014612c1f573d612be3816124d7565b90612bf160405192836124b6565b81528091833d92013e5b80519182612c1c5760405162461bcd60e51b81528061292a6004820161292e565b01fd5b506060612bfb565b6001600160e01b0319161492509050565b9091508581813d8311612c75575b612c5081836124b6565b81010312612c7157516001600160e01b031981168103612c71579038612bc9565b8480fd5b503d612c46565b505050915050600190565b15612c8e57565b60405162461bcd60e51b8152602060048201526016602482015275139bdd08185d5d1a1bdc9a5e9959081d1bc81b5a5b9d60521b6044820152606490fd5b15612cd357565b60405162461bcd60e51b815260206004820152601960248201527f436f646520686173682063616e6e6f7420626520656d707479000000000000006044820152606490fd5b818110612d23575050565b60008155600101612d18565b8054600160401b81101561064057612d4c916001820181556126d6565b819291549060031b91821b91600019901b1916179055565b6000198114612d735760010190565b634e487b7160e01b600052601160045260246000fd5b60ff60075460a01c16612d9857565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b15612dd757565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b15612e2357565b60405162461bcd60e51b81526020600482015260126024820152712737ba103a34329033b0b6b29037bbb732b960711b6044820152606490fd5b15612e6457565b60405162461bcd60e51b815260206004820152601360248201527211d85b5948191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b15612ea657565b60405162461bcd60e51b815260206004820152601260248201527111d85b59481b9bdd081c1d589b1a5cda195960721b6044820152606490fdfea264697066735822122076e4b4da6d25e2b157c1c20c9eb96e9f6a8ca500abfc0db55ffc38bfb2bec91564736f6c63430008130033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_AUTHORIZEDMINTERS = "authorizedMinters";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CREATEGAME = "createGame";

    public static final String FUNC_CREATORGAMES = "creatorGames";

    public static final String FUNC_GAMES = "games";

    public static final String FUNC_GAMESBYTAG = "gamesByTag";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETGAME = "getGame";

    public static final String FUNC_GETGAMESBYCREATOR = "getGamesByCreator";

    public static final String FUNC_GETGAMESBYTAG = "getGamesByTag";

    public static final String FUNC_GETPUBLISHEDGAMECOUNT = "getPublishedGameCount";

    public static final String FUNC_GETTOTALGAMECOUNT = "getTotalGameCount";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PUBLISHGAME = "publishGame";

    public static final String FUNC_RATEGAME = "rateGame";

    public static final String FUNC_RECORDGAMEPLAY = "recordGamePlay";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETAUTHORIZEDMINTER = "setAuthorizedMinter";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_UNPUBLISHGAME = "unpublishGame";

    public static final String FUNC_UPDATEGAMECODE = "updateGameCode";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GAMECREATED_EVENT = new Event("GameCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event GAMEPLAYED_EVENT = new Event("GamePlayed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event GAMEPUBLISHED_EVENT = new Event("GamePublished", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event GAMERATED_EVENT = new Event("GameRated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GAMEUPDATED_EVENT = new Event("GameUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected GameNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GameNFT(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected GameNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected GameNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BatchMetadataUpdateEventResponse getBatchMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
        BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBatchMetadataUpdateEventFromLog(log));
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public static List<GameCreatedEventResponse> getGameCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMECREATED_EVENT, transactionReceipt);
        ArrayList<GameCreatedEventResponse> responses = new ArrayList<GameCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameCreatedEventResponse typedResponse = new GameCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.title = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.codeHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameCreatedEventResponse getGameCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMECREATED_EVENT, log);
        GameCreatedEventResponse typedResponse = new GameCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.title = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.codeHash = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<GameCreatedEventResponse> gameCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameCreatedEventFromLog(log));
    }

    public Flowable<GameCreatedEventResponse> gameCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMECREATED_EVENT));
        return gameCreatedEventFlowable(filter);
    }

    public static List<GamePlayedEventResponse> getGamePlayedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMEPLAYED_EVENT, transactionReceipt);
        ArrayList<GamePlayedEventResponse> responses = new ArrayList<GamePlayedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GamePlayedEventResponse typedResponse = new GamePlayedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.player = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GamePlayedEventResponse getGamePlayedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMEPLAYED_EVENT, log);
        GamePlayedEventResponse typedResponse = new GamePlayedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.player = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<GamePlayedEventResponse> gamePlayedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGamePlayedEventFromLog(log));
    }

    public Flowable<GamePlayedEventResponse> gamePlayedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMEPLAYED_EVENT));
        return gamePlayedEventFlowable(filter);
    }

    public static List<GamePublishedEventResponse> getGamePublishedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMEPUBLISHED_EVENT, transactionReceipt);
        ArrayList<GamePublishedEventResponse> responses = new ArrayList<GamePublishedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GamePublishedEventResponse typedResponse = new GamePublishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GamePublishedEventResponse getGamePublishedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMEPUBLISHED_EVENT, log);
        GamePublishedEventResponse typedResponse = new GamePublishedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<GamePublishedEventResponse> gamePublishedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGamePublishedEventFromLog(log));
    }

    public Flowable<GamePublishedEventResponse> gamePublishedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMEPUBLISHED_EVENT));
        return gamePublishedEventFlowable(filter);
    }

    public static List<GameRatedEventResponse> getGameRatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMERATED_EVENT, transactionReceipt);
        ArrayList<GameRatedEventResponse> responses = new ArrayList<GameRatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameRatedEventResponse typedResponse = new GameRatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.rater = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.rating = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameRatedEventResponse getGameRatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMERATED_EVENT, log);
        GameRatedEventResponse typedResponse = new GameRatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.rater = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.rating = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<GameRatedEventResponse> gameRatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameRatedEventFromLog(log));
    }

    public Flowable<GameRatedEventResponse> gameRatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMERATED_EVENT));
        return gameRatedEventFlowable(filter);
    }

    public static List<GameUpdatedEventResponse> getGameUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMEUPDATED_EVENT, transactionReceipt);
        ArrayList<GameUpdatedEventResponse> responses = new ArrayList<GameUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameUpdatedEventResponse typedResponse = new GameUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newCodeHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameUpdatedEventResponse getGameUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMEUPDATED_EVENT, log);
        GameUpdatedEventResponse typedResponse = new GameUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newCodeHash = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<GameUpdatedEventResponse> gameUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameUpdatedEventFromLog(log));
    }

    public Flowable<GameUpdatedEventResponse> gameUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMEUPDATED_EVENT));
        return gameUpdatedEventFlowable(filter);
    }

    public static List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MetadataUpdateEventResponse getMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, log);
        MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMetadataUpdateEventFromLog(log));
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> authorizedMinters(String param0) {
        final Function function = new Function(FUNC_AUTHORIZEDMINTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createGame(String to, String title, String description, String codeHash, String assetsHash, List<String> tags, String metadataURI) {
        final Function function = new Function(
                FUNC_CREATEGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.Utf8String(title), 
                new org.web3j.abi.datatypes.Utf8String(description), 
                new org.web3j.abi.datatypes.Utf8String(codeHash), 
                new org.web3j.abi.datatypes.Utf8String(assetsHash), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(tags, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.Utf8String(metadataURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> creatorGames(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_CREATORGAMES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple9<String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>> games(BigInteger param0) {
        final Function function = new Function(FUNC_GAMES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple9<String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple9<String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple9<String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (Boolean) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> gamesByTag(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_GAMESBYTAG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Game> getGame(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Game>() {}));
        return executeRemoteCallSingleValueReturn(function, Game.class);
    }

    public RemoteFunctionCall<List> getGamesByCreator(String creator) {
        final Function function = new Function(FUNC_GETGAMESBYCREATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, creator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getGamesByTag(String tag) {
        final Function function = new Function(FUNC_GETGAMESBYTAG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(tag)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getPublishedGameCount() {
        final Function function = new Function(FUNC_GETPUBLISHEDGAMECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalGameCount() {
        final Function function = new Function(FUNC_GETTOTALGAMECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> publishGame(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_PUBLISHGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rateGame(BigInteger tokenId, BigInteger rating) {
        final Function function = new Function(
                FUNC_RATEGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(rating)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> recordGamePlay(BigInteger tokenId, String player) {
        final Function function = new Function(
                FUNC_RECORDGAMEPLAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, player)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthorizedMinter(String minter, Boolean authorized) {
        final Function function = new Function(
                FUNC_SETAUTHORIZEDMINTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, minter), 
                new org.web3j.abi.datatypes.Bool(authorized)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpublishGame(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_UNPUBLISHGAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateGameCode(BigInteger tokenId, String newCodeHash, String newAssetsHash) {
        final Function function = new Function(
                FUNC_UPDATEGAMECODE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Utf8String(newCodeHash), 
                new org.web3j.abi.datatypes.Utf8String(newAssetsHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static GameNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GameNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static GameNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GameNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static GameNFT load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new GameNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static GameNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new GameNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<GameNFT> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(GameNFT.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<GameNFT> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(GameNFT.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<GameNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GameNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<GameNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(GameNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Game extends DynamicStruct {
        public String title;

        public String description;

        public String codeHash;

        public String assetsHash;

        public String creator;

        public BigInteger createdAt;

        public BigInteger playCount;

        public BigInteger rating;

        public Boolean isPublished;

        public List<String> tags;

        public Game(String title, String description, String codeHash, String assetsHash, String creator, BigInteger createdAt, BigInteger playCount, BigInteger rating, Boolean isPublished, List<String> tags) {
            super(new org.web3j.abi.datatypes.Utf8String(title), 
                    new org.web3j.abi.datatypes.Utf8String(description), 
                    new org.web3j.abi.datatypes.Utf8String(codeHash), 
                    new org.web3j.abi.datatypes.Utf8String(assetsHash), 
                    new org.web3j.abi.datatypes.Address(160, creator), 
                    new org.web3j.abi.datatypes.generated.Uint256(createdAt), 
                    new org.web3j.abi.datatypes.generated.Uint256(playCount), 
                    new org.web3j.abi.datatypes.generated.Uint256(rating), 
                    new org.web3j.abi.datatypes.Bool(isPublished), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(tags, org.web3j.abi.datatypes.Utf8String.class)));
            this.title = title;
            this.description = description;
            this.codeHash = codeHash;
            this.assetsHash = assetsHash;
            this.creator = creator;
            this.createdAt = createdAt;
            this.playCount = playCount;
            this.rating = rating;
            this.isPublished = isPublished;
            this.tags = tags;
        }

        public Game(Utf8String title, Utf8String description, Utf8String codeHash, Utf8String assetsHash, Address creator, Uint256 createdAt, Uint256 playCount, Uint256 rating, Bool isPublished, DynamicArray<Utf8String> tags) {
            super(title, description, codeHash, assetsHash, creator, createdAt, playCount, rating, isPublished, tags);
            this.title = title.getValue();
            this.description = description.getValue();
            this.codeHash = codeHash.getValue();
            this.assetsHash = assetsHash.getValue();
            this.creator = creator.getValue();
            this.createdAt = createdAt.getValue();
            this.playCount = playCount.getValue();
            this.rating = rating.getValue();
            this.isPublished = isPublished.getValue();
            this.tags = tags.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class GameCreatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String creator;

        public String title;

        public String codeHash;
    }

    public static class GamePlayedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String player;
    }

    public static class GamePublishedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String creator;
    }

    public static class GameRatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String rater;

        public BigInteger rating;
    }

    public static class GameUpdatedEventResponse extends BaseEventResponse {
        public BigInteger tokenId;

        public String newCodeHash;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
